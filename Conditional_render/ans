// loops

// Write a function that takes a number n and prints all numbers from 1 to n.
function printNumbers(n) {
    for (let i = 1; i <= n; i++) {
        console.log(i);
    }
}

printNumbers(5);

// Write a function that takes an array of numbers and prints each number.

function printArrayElements(arr) {
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i]);
    }
}

printArrayElements([1, 2, 3, 4, 5]);

// Write a function that takes a number n and prints the first n Fibonacci numbers.

function printFibonacci(n) {
    let a = 0, b = 1;
    for (let i = 0; i < n; i++) {
        console.log(a);
        [a, b] = [b, a + b];
    }
}
printFibonacci(5);

// Write a function that takes an array of numbers and prints the sum of all the numbers.

function sumArray(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    console.log(sum);
}
sumArray([1, 2, 3, 4, 5]);

// Write a function that takes an array of numbers and prints only the even numbers.
function printEvenNumbers(arr) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] % 2 === 0) {
            console.log(arr[i]);
        }
    }
}
printEvenNumbers([1, 2, 3, 4, 5, 6]);


// Write a function that takes a string and prints each character of the string.

function printStringCharacters(str) {
    for (let i = 0; i < str.length; i++) {
        console.log(str[i]);
    }
}

printStringCharacters('hello');


// Write a function that takes an array of numbers and prints the maximum number in the array.

function printMaxNumber(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    console.log(max);
}
printMaxNumber([1, 2, 3, 4, 5]);

// Write a function that takes a number n and prints a right-angle triangle pattern of * of n rows.

function printTriangle(n) {
    for (let i = 1; i <= n; i++) {
        console.log('*'.repeat(i));
    }
}

printTriangle(5);


// Write a function that takes an array of strings and prints each string in uppercase.


function printUppercaseStrings(arr) {
    for (let i = 0; i < arr.length; i++) {
        console.log(arr[i].toUpperCase());
    }
}
printUppercaseStrings(['hello', 'world']);


// Write a function that takes a number n and prints the multiplication table for n up to 10.

function printMultiplicationTable(n) {
    for (let i = 1; i <= 10; i++) {
        console.log(`${n} * ${i} = ${n * i}`);
    }
}

// Example usage:
printMultiplicationTable(5);



// arrays 

// Write a function that takes a string and returns the most frequent character in the string.
function mostFrequentChar(str) {
    const charMap = {};
    let maxChar = '';
    let maxCount = 0;

    for (let char of str) {
        charMap[char] = charMap[char] + 1 || 1;
    }

    for (let char in charMap) {
        if (charMap[char] > maxCount) {
            maxChar = char;
            maxCount = charMap[char];
        }
    }

    return maxChar;
}
console.log(mostFrequentChar('hello world')); // Output: 'l'


// Write a function that takes two arrays and returns a new array with elements that are present in both arrays.

function intersectArrays(arr1, arr2) {
    return arr1.filter(value => arr2.includes(value));
}

console.log(intersectArrays([1, 2, 3], [2, 3, 4])); // Output: [2, 3]

// Write a function that takes an array of objects and returns a new array with the objects sorted by a specified key.

function sortByKey(arr, key) {
    return arr.slice().sort((a, b) => (a[key] > b[key] ? 1 : -1));
}

// Example usage:
const people = [
    { name: 'John', age: 30 },
    { name: 'Jane', age: 25 },
    { name: 'Jack', age: 35 }
];

console.log(sortByKey(people, 'age'));

// Write a function that takes a string and returns true if the string is a palindrome, and false otherwise.

function isPalindrome(str) {
    const cleanedStr = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();
    return cleanedStr === cleanedStr.split('').reverse().join('');
}

console.log(isPalindrome('A man, a plan, a canal, Panama')); // Output: true
console.log(isPalindrome('hello')); // Output: false




// Write a function that takes an array of numbers and returns the sum of all odd numbers.
function sumOddNumbers(numbers) {
    return numbers.filter(num => num % 2 !== 0).reduce((acc, num) => acc + num, 0);
}

console.log(sumOddNumbers([1, 2, 3, 4, 5])); // Output: 9

// Write a function that takes an array of numbers and returns the product of all the numbers.
function productArray(numbers) {
    return numbers.reduce((acc, num) => acc * num, 1);
}

console.log(productArray([1, 2, 3, 4])); // Output: 24

// Write a function that takes an array of strings and returns a new array with the lengths of each string.

function stringLengths(strings) {
    return strings.map(str => str.length);
}
console.log(stringLengths(['hello', 'world']));

// Write a function that takes an array of numbers and returns a new array with the numbers squared.

function squareNumbers(numbers) {
    return numbers.map(num => num * num);
}

console.log(squareNumbers([1, 2, 3, 4])); // Output: [1, 4, 9, 16]

// Write a function that takes an array and a value, and removes all instances of that value from the array.

function removeElement(arr, value) {
    return arr.filter(item => item !== value);
}
console.log(removeElement([1, 2, 3, 4, 2], 2)); // Output: [1, 3, 4]


// Write a function that takes an array of numbers and returns the average of all the numbers.

function averageArray(numbers) {
    const sum = numbers.reduce((acc, num) => acc + num, 0);
    return sum / numbers.length;
}

console.log(averageArray([1, 2, 3, 4, 5])); // Output: 3

// Write a function that takes an array of strings and returns a new array with only the strings that start with a specified letter.

function filterByFirstLetter(strings, letter) {
    return strings.filter(str => str.charAt(0).toLowerCase() === letter.toLowerCase());
}
console.log(filterByFirstLetter(['apple', 'banana', 'avocado', 'blueberry'], 'a')); // Output: ['apple', 'avocado']

// Write a function that takes a two-dimensional array (array of arrays) and flattens it into a one-dimensional array.

function flattenArray(arr) {
    return arr.reduce((acc, val) => acc.concat(val), []);
}


console.log(flattenArray([[1, 2], [3, 4], [5, 6]])); // Output: [1, 2, 3, 4, 5, 6]


// Write a function that takes an array of numbers and returns the smallest number in the array.

function findSmallestNumber(numbers) {
    return Math.min(...numbers);
}

console.log(findSmallestNumber([3, 5, 7, 2, 8])); // Output: 2


// Write a function that takes an array of strings and returns the longest string in the array.

function findLongestString(strings) {
    return strings.reduce((longest, current) => current.length > longest.length ? current : longest, '');
}

console.log(findLongestString(['short', 'medium', 'longest'])); // Output: 'longest'



// object =====

// Write a function that takes an object and returns an array of its keys.

function getObjectKeys(obj) {
    return Object.keys(obj);
}

// Example usage:
const person = { name: 'John', age: 30, city: 'New York' };
console.log(getObjectKeys(person)); // Output: ['name', 'age', 'city']


// Write a function that takes an object and returns an array of its values.

function getObjectValues(obj) {
    return Object.values(obj);
}
const person = { name: 'John', age: 30, city: 'New York' };
console.log(getObjectValues(person)); // Output: ['John', 30, 'New York']


// Write a function that takes two objects and returns a new object that combines the properties of both. If the same key exists in both objects, the value from the second object should be used.

function mergeObjects(obj1, obj2) {
    return { ...obj1, ...obj2 };
}

// Example usage:
const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };
console.log(mergeObjects(obj1, obj2)); // Output: { a: 1, b: 3, c: 4 }


// Write a function that takes an object and returns a new object with the keys and values swapped.


function swapKeysAndValues(obj) {
    const swapped = {};
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            swapped[obj[key]] = key;
        }
    }
    return swapped;
}

// Example usage:
const person = { name: 'John', age: 30, city: 'New York' };
console.log(swapKeysAndValues(person)); // Output: { John: 'name', 30: 'age', 'New York': 'city' }

// Write a function that takes an array of objects and a key, and returns an array of the values corresponding to that key in each object.


function pluck(objects, key) {
    return objects.map(obj => obj[key]);
}

// Example usage:
const people = [{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }, { name: 'Jack', age: 35 }];
console.log(pluck(people, 'name')); // Output: ['John', 'Jane', 'Jack']


// Write a function that takes an object and a key, and returns true if the key exists in the object, and false otherwise.
function hasKey(obj, key) {
    return obj.hasOwnProperty(key);
}

const person = { name: 'John', age: 30, city: 'New York' };
console.log(hasKey(person, 'age')); // Output: true
console.log(hasKey(person, 'country')); // Output: false


// Write a function that takes an array of objects and returns a new object that combines all the properties of the objects. If the same key exists in multiple objects, the value from the last object should be used.

function combineObjects(objects) {
    return objects.reduce((acc, obj) => ({ ...acc, ...obj }), {});
}

// Example usage:
const objs = [{ a: 1, b: 2 }, { b: 3, c: 4 }, { d: 5 }];
console.log(combineObjects(objs)); // Output: { a: 1, b: 3, c: 4, d: 5 }


// Write a function that takes an object and returns the number of key-value pairs in the object.


function countPairs(obj) {
    return Object.keys(obj).length;
}

// Example usage:
const person = { name: 'John', age: 30, city: 'New York' };
console.log(countPairs(person)); // Output: 3

// Write a function that takes an array of objects and a key, and returns a new array of objects sorted by the values corresponding to that key.
function sortByKey(objects, key) {
    return objects.slice().sort((a, b) => (a[key] > b[key] ? 1 : -1));
}

// Example usage:
const people = [{ name: 'John', age: 30 }, { name: 'Jane', age: 25 }, { name: 'Jack', age: 35 }];
console.log(sortByKey(people, 'age'));
// Output: [{ name: 'Jane', age: 25 }, { name: 'John', age: 30 }, { name: 'Jack', age: 35 }]


// Write a function that takes an object and returns a new object with only the properties that have string values.

function filterStringValues(obj) {
    const result = {};
    for (let key in obj) {
        if (typeof obj[key] === 'string') {
            result[key] = obj[key];
        }
    }
    return result;
}

// Example usage:
const person = { name: 'John', age: 30, city: 'New York', isEmployed: true };
console.log(filterStringValues(person)); // Output: { name: 'John', city: 'New York' }